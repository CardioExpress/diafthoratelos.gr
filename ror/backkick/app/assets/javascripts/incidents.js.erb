<%# encoding: utf-8 %>

//= require_self

function initialize_map() {
    var mapOptions = {
        disableDefaultUI: true,
        center: new google.maps.LatLng(38.074208, 23.824312),
        zoom: 5,
        mapTypeId: google.maps.MapTypeId.ROADMAP
    };

    var map = new google.maps.Map(document.getElementById('map_canvas'),
				  mapOptions);

    var input = document.getElementById('searchTextField');
    var autocomplete = new google.maps.places.Autocomplete(input);

    autocomplete.bindTo('bounds', map);

    var marker = new google.maps.Marker({
        map: map
    });

    google.maps.event.addListener(autocomplete, 'place_changed', function () {
        var place = autocomplete.getPlace();
        if (place.geometry.viewport) {
            map.fitBounds(place.geometry.viewport);
        } else {
            map.setCenter(place.geometry.location);
            map.setZoom(17);  // Why 17? Because it looks good.
        }

        var image = new google.maps.MarkerImage(
            place.icon,
            new google.maps.Size(71, 71),
            new google.maps.Point(0, 0),
            new google.maps.Point(17, 34),
            new google.maps.Size(35, 35));
        marker.setIcon(image);
        marker.setPosition(place.geometry.location);

	var latitude = place.geometry.location.Xa;
	var longitude = place.geometry.location.Ya;
	
        var address = '';
	if (place.address_components) {
	    var ac_length = place.address_components.length;
	    for (var i = 0; i <  ac_length - 1; i++) {
		address += place.address_components[i].short_name + ':' || '';
	    }
	    address += place.address_components[ac_length - 1].short_name || '';
        }
        document.getElementById("place_name").value = place.name;
	document.getElementById("place_latitude").value = latitude;
	document.getElementById("place_longitude").value = longitude;
	document.getElementById("place_address").value = address;

	});
    
    // Sets a listener on a radio button to change the filter type on Places
    // Autocomplete.
    function setupClickListener(id, types) {
        var radioButton = document.getElementById(id);
        google.maps.event.addDomListener(radioButton, 'click', function () {
            autocomplete.setTypes(types);
        });
    }
    
    setupClickListener('changetype_all', []);
    setupClickListener('changetype_establishment', ['establishment']);
    setupClickListener('changetype_geocode', ['geocode']);

}

function make_autocomplete(jQueryObject, searchUrl, msg) {
    jQueryObject.autocomplete({
	source: function(request, response) {
            var cat = $("#category_id").val();
	    $.ajax({
		url: searchUrl,
		dataType: "json",
		data: {
		    term: request.term,
		    category_id: cat,
		},
		success: function(data) {
		    response($.map(data, function(item) {
			return {
			    label: item.label,
			    value: item.value
			}}))},
	    })},
	minLength: 2,
	focus: function(event, ui) {
	    $(this).val(ui.item.label);
	    return false; 
	},	    
	select: function(event, ui) {
	    $(this).val(ui.item.label);
	    return false; 
	},
	change: function(event, ui) {
            var cat = $("#category_id").val();
	    if (ui.item == null) {
		$.ajax({
    	    	    url: searchUrl,
    	    	    dataType: "json",
    	    	    data: {
    	    		term: $(this).val(),
    	    		category_id: cat,
    	    		appr: "false"
    	    	    },
    	    	    success: function(data) {
    	    		if (data.length == 0) {
    	    		    foundPublicEntity = false;
			    jQueryObject.val(msg);
    	    		}
		    }});
	    } else if ($(this).val() != ui.item.label) {
		$(this).val(msg);		
	    }
	},
    });

}

$(function() {

    $("#incident_money_asked").click(function() {
    	clearTxt($(this), <%= "'#{I18n.translate(:money_asked)}'" %>);
    });

    $("#incident_money_asked").blur(function() {
    	resetTxt($(this), <%= "'#{I18n.translate(:money_asked)}'" %>);
    });

    $("#incident_money_given").click(function() {
    	clearTxt($(this), <%= "'#{I18n.translate(:money_given)}'" %>);
    });

    $("#incident_money_given").blur(function() {
    	resetTxt($(this), <%= "'#{I18n.translate(:money_given)}'" %>);
    });

    $("#public_entity_name").click(function() {
    	clearTxt($(this), <%= "'#{I18n.translate(:public_entity_name)}'" %>);
    });

    $("#public_entity_name").blur(function() {
    	resetTxt($(this), <%= "'#{I18n.translate(:public_entity_name)}'" %>);
    });


    $("#public_entity_name_filter").click(function() {
    	clearTxt($(this), <%= "'#{I18n.translate(:public_entity_name)}'" %>);
    });

    $("#public_entity_name_filter").blur(function() {
    	resetTxt($(this), <%= "'#{I18n.translate(:public_entity_name)}'" %>);
    });

    var foundPublicEntity = false;
        
    var categoryIdVal = "";

    $("#public_entity_category_id").change(function() {
	var categoryIdVal = $(this).val();
    });

    make_autocomplete($("#place_name"),
                      "/places/index",
        	      <%= "'#{I18n.translate(:area_city)}'" %>);

    make_autocomplete($("#public_entity_name"),
                      "/public_entities/search?form=short",
        	      <%= "'#{I18n.translate(:public_entity_name)}'" %>);

    make_autocomplete($("#public_entity_name_filter"),
        	      "/public_entities/search?form=short",
        	      <%= "'#{I18n.translate(:public_entity_name)}'" %>);
    
    if ($('#map_canvas').length > 0) {
	initialize_map();
    }

    var place_name_filter = $('#place_name_filter');
    
    if (place_name_filter.length > 0) {
        var input = place_name_filter.get(0);
        var defaultBounds = new google.maps.LatLngBounds(
            new google.maps.LatLng(39.074208, 21.824312));
        var options = {
            bounds: defaultBounds,
        }
        var autocomplete = new google.maps.places.Autocomplete(input, options);
    }

});

function clearTxt(obj, text) {
    if ($(obj).val() == text) {
        $(obj).val('')
    }
}

function resetTxt(obj, text) {
    if ($(obj).val() == '') {
        $(obj).val(text)
    }
}
