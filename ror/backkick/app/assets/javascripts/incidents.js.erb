<%# encoding: utf-8 %>

var RecaptchaOptions = {
    tabindex: 1,
    theme: 'custom',
    custom_theme_widget: 'recaptcha_widget'
};

function initialize_map() {
    var mapOptions = {
        disableDefaultUI: true,
        center: new google.maps.LatLng(39.074208, 21.824312),
        zoom: 5,
        mapTypeId: google.maps.MapTypeId.ROADMAP
    };


    var map = new google.maps.Map(document.getElementById('map_canvas'),
				  mapOptions);

    var input = document.getElementById('searchTextField');
    var autocomplete = new google.maps.places.Autocomplete(input);

    autocomplete.bindTo('bounds', map);

    var marker = new google.maps.Marker({
        map: map
    });

    google.maps.event.addListener(autocomplete, 'place_changed', function () {
        var place = autocomplete.getPlace();
        if (place.geometry.viewport) {
            map.fitBounds(place.geometry.viewport);
        } else {
            map.setCenter(place.geometry.location);
            map.setZoom(17);  // Why 17? Because it looks good.
        }

        var image = new google.maps.MarkerImage(
            place.icon,
            new google.maps.Size(71, 71),
            new google.maps.Point(0, 0),
            new google.maps.Point(17, 34),
            new google.maps.Size(35, 35));
        marker.setIcon(image);
        marker.setPosition(place.geometry.location);

        var address = '';
        if (place.address_components) {
                    address = [
              (place.address_components[0] && place.address_components[0].short_name || ''),
              (place.address_components[1] && place.address_components[1].short_name || ''),
              (place.address_components[2] && place.address_components[2].short_name || '')
		    ].join(' ');
        }
        document.getElementById("SelectedPlace").value = place.name

	});
    
    // Sets a listener on a radio button to change the filter type on Places
    // Autocomplete.
    function setupClickListener(id, types) {
        var radioButton = document.getElementById(id);
        google.maps.event.addDomListener(radioButton, 'click', function () {
            autocomplete.setTypes(types);
        });
    }
    
    setupClickListener('changetype_all', []);
    setupClickListener('changetype_establishment', ['establishment']);
    setupClickListener('changetype_geocode', ['geocode']);

}

$(function() {

    $("#incident_money_asked").click(function() {
    	clearTxt($(this), <%= "'#{I18n.translate(:money_asked)}'" %>);
    });

    $("#incident_money_asked").blur(function() {
    	resetTxt($(this), <%= "'#{I18n.translate(:money_asked)}'" %>);
    });

    $("#incident_money_given").click(function() {
    	clearTxt($(this), <%= "'#{I18n.translate(:money_given)}'" %>);
    });

    $("#incident_money_given").blur(function() {
    	resetTxt($(this), <%= "'#{I18n.translate(:money_given)}'" %>);
    });

    $("#public_entity_name").click(function() {
    	clearTxt($(this), <%= "'#{I18n.translate(:public_entity_name)}'" %>);
    });

    var foundPublicEntity = false;
        
    var categoryIdVal = "";

    $("#public_entity_category_id").change(function() {
	categoryIdVal = $(this).val();
    });
    
    $("#public_entity_name").autocomplete({
	source: function(request, response) {
	    $.ajax({
		url: "/public_entities/search",
		dataType: "json",
		data: {
		    term: request.term,
		    category_id: categoryIdVal,
		},
		success: function(data) {
		    response($.map(data, function(item) {
			return {
			    label: item.label,
			    value: item.value
			}}))},
	    })},
	minLength: 2,
	focus: function(event, ui) {
	    $(this).val(ui.item.label);
	    return false; 
	},	    
	select: function(event, ui) {
	    $(this).val(ui.item.label);
	    return false; 
	},
	change: function(event, ui) {
	    if (ui.item == null) {
		$.ajax({
    	    	    url: "/public_entities/search",
    	    	    dataType: "json",
    	    	    data: {
    	    		term: $(this).val(),
    	    		category_id: categoryIdVal,
    	    		exact: 1
    	    	    },
    	    	    success: function(data) {
    	    		if (data.length == 0) {
    	    		    foundPublicEntity = false;
			    $("#public_entity_name").val(<%= "'#{I18n.translate(:public_entity_name)}'" %>);
    	    		}
		    }});
	    } else if ($(this).val() != ui.item.label) {
		$(this).val(<%= "'#{I18n.translate(:public_entity_name)}'" %>);		
	    }
	},
    });

    initialize_map();

});

function clearTxt(obj, text) {
    if ($(obj).val() == text) {
        $(obj).val('')
    }
}

function resetTxt(obj, text) {
    if ($(obj).val() == '') {
        $(obj).val(text)
    }
}
